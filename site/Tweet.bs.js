// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

function renderTweet(tweet) {
  var getImages = function (d) {
    var isPhoto = function (img) {
      if (img.type === "photo" || img.type === "video") {
        return true;
      } else {
        return img.type === "animated_gif";
      }
    };
    var maxBitrate = function (prev, cur) {
      if (cur.bitrate > prev.bitrate) {
        return cur;
      } else {
        return prev;
      }
    };
    var getVideoLink = function (info) {
      var variants = info !== undefined ? info.variants : [];
      if (variants.length === 0) {
        return "";
      }
      var best = variants.reduce(maxBitrate, {
        bitrate: -0.1,
        url: ""
      });
      var millis;
      if (info !== undefined) {
        var duration_millis = info.duration_millis;
        millis = duration_millis !== undefined ? duration_millis : 0;
      } else {
        millis = 0;
      }
      var duration = "" + millis + " ms";
      return '<a href="' + best.url + '">' + duration + "</a>";
    };
    var getImage = function (image) {
      var size = image.sizes.small;
      var width = size.w / 2;
      var height = size.h / 2;
      var small = image.media_url + ":small";
      var large = image.media_url + ":large";
      var img =
        '<img src="' +
        small +
        ('" width="' + width + '" height="' + height + '" />');
      var duration = getVideoLink(image.video_info);
      return '<a href="' + large + '">' + img + "</a>" + duration;
    };
    var match = d.extended_entities;
    if (match !== undefined) {
      return match.media.filter(isPhoto).map(getImage).join("");
    } else {
      return "";
    }
  };
  var getUser = function (retweet, d) {
    if (retweet !== undefined) {
      return retweet.user.screen_name;
    } else {
      return d.user.screen_name;
    }
  };
  var getRetweeter = function (retweet, d) {
    if (retweet !== undefined) {
      return " <i>" + d.user.screen_name + "</i> ";
    } else {
      return " ";
    }
  };
  var fullText = function (data) {
    return data.full_text.replace(/\n/g, "<br>");
  };
  var getText = function (retweetStatus, tweetStatus) {
    var replaceUrlWithLink = function (text, url) {
      return text.replace(
        url.url,
        '<a href="' + url.url + '" target="_blank">' + url.display_url + "</a>"
      );
    };
    var data = retweetStatus !== undefined ? retweetStatus : tweetStatus;
    return data.entities.urls.reduce(replaceUrlWithLink, fullText(data));
  };
  var getQuote = function (d) {
    var quotedStatus = d.quoted_status;
    if (quotedStatus !== undefined) {
      return '<div class="quoted">' + fullText(quotedStatus) + "</div>";
    } else {
      return "";
    }
  };
  var retweet = tweet.retweeted_status;
  var time = tweet.created_at.substr(8, 8);
  var user = getUser(retweet, tweet);
  var t = retweet !== undefined ? retweet : tweet;
  var image = getImages(t);
  var a =
    '<a href="https://twitter.com/' +
    user +
    "/status/" +
    tweet.id_str +
    '""" target="_blank">' +
    time +
    "</a>";
  var i = getRetweeter(retweet, tweet);
  var b = "<b>" + user + "</b>";
  var text = getText(retweet, tweet);
  var images = "<div>" + image + "</div>";
  var quote = getQuote(t);
  return "<li>" + a + i + b + " " + text + " " + quote + " " + images + "</li>";
}

export { renderTweet };
/* No side effect */
